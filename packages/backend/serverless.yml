service: hoshino

useDotenv: true

plugins:
  - serverless-scriptable-plugin

provider:
  name: aws
  runtime: nodejs16.x

  region: ap-northeast-1
  stage: main

  memorySize: 128
  architecture: arm64

  logRetentionInDays: 7
  versionFunctions: false

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    # NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
    STAGE: ${self:provider.stage}

    REDIS_URL: ${env:REDIS_URL}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "sqs:SendMessage"
          Resource:
            - arn:aws:sqs:${self:provider.region}:*:${self:service}-${self:provider.stage}-task
        - Effect: "Allow"
          Action:
            - "execute-api:ManageConnections"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:UpdateItem"
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/ConnectionIds

package:
  patterns:
    - "!**"
    - "!node_modules/**"
    - output/http.js
    - output/websocket.js
    - output/package.json

functions:
  http:
    handler: output/http.main
    events:
      - httpApi: "*"

  ws_connect:
    handler: output/websocket.connect
    events:
      - websocket:
          route: $connect
  ws_disconnect:
    handler: output/websocket.disconnect
    events:
      - websocket:
          route: $disconnect
  ws_dispatch:
    handler: output/websocket.dispatch
    events:
      - websocket:
          route: $default

  ws_schedule:
    handler: output/websocket.schedule
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: false

  ws_task:
    handler: output/websocket.handle_task
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - TaskQueue
              - Arn
          # https://aws.amazon.com/ko/about-aws/whats-new/2019/11/aws-lambda-supports-max-retry-attempts-event-age-asynchronous-invocations/?nc1=h_ls
          maximumRetryAttempts: 0

resources:
  Resources:
    TaskQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-task
    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ConnectionIds
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TimeToLiveSpecification:
          AttributeName: seconds_ttl
          Enabled: false

custom:
  scriptHooks:
    before:package:createDeploymentArtifacts: pnpm run package
